{"version":3,"sources":["webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.html","webpack:///src/app/authentication/forgot-password/forgot-password.component.ts","webpack:///src/app/authentication/reset-password/reset-password.component.html","webpack:///src/app/authentication/reset-password/reset-password.component.ts","webpack:///src/app/authentication/signin/signin.component.html","webpack:///src/app/authentication/signin/signin.component.ts","webpack:///src/app/authentication/signup/next-signup/next-signup.component.html","webpack:///src/app/authentication/signup/next-signup/next-signup.component.ts","webpack:///src/app/authentication/signup/signup.component.html","webpack:///src/app/authentication/signup/signup.component.ts","webpack:///src/app/core/service/toast-service/toas-service.service.ts"],"names":["routes","path","redirectTo","pathMatch","component","SigninComponent","SignupComponent","NextSignupComponent","ForgotPasswordComponent","ResetPasswordComponent","AuthenticationRoutingModule","RouterModule","AuthenticationModule","CommonModule","FormsModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","MatIconModule","MatButtonModule","MatSelectModule","formBuilder","router","restApi","toastr","loading","authForm","group","username","Validators","password","controls","invalid","changeUserPassword","value","subscribe","next","result","showSuccessMessage","navigate","error","showErrorMessage","onSubmit","_form","sendEmailToUser","email","errorMsg","success","timeOut","console","log","authService","submitted","hide","login","f","token","setTimeout","userRole","localStorage","getItem","Role","UnsubscribeOnDestroyAdapter","activedRoute","chide","queryParams","data","userDataSendByRoute","getAllRive","allRive","idRive","postValue","getCabinetByRive","allCabinetMedicales","idCabinet","getCabinetSpecialities","allSpecialities","getPersonEmail","cpassword","profile","userPostBody","nom","prenom","adresse","telephone","genre","specialite","cabinetMedicale","profession","addNewUser","route","returnUrl","snapshot","getPersonUsername","getPersonTelephone","navigationValue","ToasServiceService","message","warning"],"mappings":"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","file":"src_app_authentication_authentication_module_ts-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { SigninComponent } from \"./signin/signin.component\";\nimport { SignupComponent } from \"./signup/signup.component\";\nimport { ForgotPasswordComponent } from \"./forgot-password/forgot-password.component\";\nimport { NextSignupComponent } from \"./signup/next-signup/next-signup.component\";\nimport { ResetPasswordComponent } from \"./reset-password/reset-password.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    redirectTo: \"signin\",\n    pathMatch: \"full\",\n  },\n  {\n    path: \"signin\",\n    component: SigninComponent,\n  },\n  {\n    path: \"signup\",\n    component: SignupComponent,\n  },\n  {\n    path: \"next-signup\",\n    component: NextSignupComponent\n  },\n  {\n    path: \"forgot-password\",\n    component: ForgotPasswordComponent\n  },\n  {\n    path: \"reset-password\",\n    component: ResetPasswordComponent\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthenticationRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { AuthenticationRoutingModule } from \"./authentication-routing.module\";\nimport { SigninComponent } from \"./signin/signin.component\";\nimport { SignupComponent } from \"./signup/signup.component\";\nimport { ForgotPasswordComponent } from \"./forgot-password/forgot-password.component\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { NextSignupComponent } from './signup/next-signup/next-signup.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [\n    SigninComponent,\n    SignupComponent,\n    ForgotPasswordComponent,\n    NextSignupComponent,\n    ResetPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AuthenticationRoutingModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSelectModule,\n  ],\n})\nexport class AuthenticationModule {}\n","<div class=\"auth-container\">\n  <div class=\"row auth-main\">\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/Gb.png);\">\n      </div>\n    </div>\n    <div class=\"col-sm-6 auth-form-section\">\n      <div class=\"form-section\">\n        <div class=\"auth-wrapper\">\n          <div class=\"logo\">\n            <img  src=\"assets/images/ges_cab.png\" alt=\"\" width=\"250\" height=\"250\" >\n          </div>\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <h2 class=\"welcome-msg card-title\"> Réinitiliser votre mot de passe </h2>\n     \n              <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"row\">\n                  <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                    <span class=\"error-subheader2 p-t-20 p-b-15\">\n                      Entrer vos informations.\n                    </span>\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                      <mat-label>Nom d'utilisateur</mat-label>\n                      <input matInput formControlName=\"username\" required>\n                      <mat-icon matSuffix>face</mat-icon>\n                      <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\n                       Veuillez renseigner votre nom d'utilisateur\n                      </mat-error>\n                    </mat-form-field>\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                   \n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                      <mat-label>Nouveau mot de passe</mat-label>\n                      <input matInput formControlName=\"password\" required>\n                      <mat-icon matSuffix>password</mat-icon>\n                      <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\n                       Veuillez renseigner votre nouveau mot de passe\n                      </mat-error>\n                    </mat-form-field>\n                  </div>\n                </div>\n                <div class=\"container-auth-form-btn mt-2 mb-0\">\n                  <button mat-flat-button [class.auth-spinner]=\"loading\" [disabled]=\"loading\" color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \" type=\"submit\">\n                    Envoyer\n                  </button>\n                </div>\n                <div class=\"w-full p-t-25 text-center\">\n                  <div>\n                    <a routerLink=\"/authentication/signin\" class=\"txt1\">\n                      Se connecter?\n                    </a>\n                  </div>\n                </div>\n              </form>\n\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\nimport { ToasServiceService } from \"src/app/core/service/toast-service/toas-service.service\";\n@Component({\n  selector: \"app-forgot-password\",\n  templateUrl: \"./forgot-password.component.html\",\n  styleUrls: [\"./forgot-password.component.scss\"],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  authForm: FormGroup;\n  public loading = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private restApi: RestApiService,\n    private toastr: ToasServiceService\n  ) {}\n  ngOnInit() {\n    this.authForm = this.formBuilder.group({\n      username: [\n        \"\",\n        [ Validators.required, Validators.minLength(3)],\n      ],\n\n      password: [\n        \"\",\n        [ Validators.required, Validators.minLength(6)],\n      ]\n     \n    });\n  }\n  get f() {\n    return this.authForm.controls;\n  }\n  onSubmit() {\n    // stop here if form is invalid\n    if (this.authForm.invalid) {\n      return;\n    } else {\n      this.loading = true;\n     this.restApi.changeUserPassword(this.authForm.controls.username.value, this.authForm.controls.password.value).subscribe(\n       {\n         next: result =>{\n           this.toastr.showSuccessMessage(result);\n            this.loading = false;\n           this.router.navigate([\"/authentication/signin\"]);\n         },\n         error: error=>{\n          this.loading = false;\n           this.toastr.showErrorMessage(\"Ce nom d'utilisateur n'existe pas\");\n         }\n       }\n     );\n    }\n  }\n}\n","<div class=\"auth-container\">\n    <div class=\"row auth-main\">\n      <div class=\"col-sm-6 px-0 d-none d-sm-block\">\n        <div class=\"left-img\" style=\"background-image: url(assets/images/pages/Gb.png);\">\n        </div>\n      </div>\n      <div class=\"col-sm-6 auth-form-section\">\n        <div class=\"form-section\">\n          <div class=\"auth-wrapper\">\n            <div class=\"logo\">\n              <img  src=\"assets/images/ges_cab.png\" alt=\"\" width=\"250\" height=\"250\" >\n            </div>\n            <div class=\"card\">\n              <div class=\"card-body\">\n                <h2 class=\"welcome-msg card-title\">Mot de passe oublié ?</h2>\n       \n                <form #_form=\"ngForm\" (ngSubmit)=\"onSubmit(_form)\">\n                  <div class=\"row\">\n                    <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                      <span class=\"error-subheader2 p-t-20 p-b-15 text-center\">\n                        Entrez votre email !\n                      </span>\n                      <div *ngIf=\"errorMsg\" class=\"col-red mb-2\">{{errorMsg}}</div>\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Votre email</mat-label>\n                        <input matInput type=\"email\" ngModel name=\"email\" required email>\n                        <mat-icon matSuffix>email</mat-icon>\n                        <mat-error *ngIf=\"!_form.valid\">\n                         Veuillez renseigner le bon email !\n                        </mat-error>\n                      </mat-form-field>\n                    </div>\n                  </div>\n                  <div class=\"container-auth-form-btn mt-2 mb-0\">\n                    <button mat-flat-button [class.auth-spinner]=\"loading\" [disabled]=\"loading\" color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!_form.valid \" type=\"submit\">\n                      Envoyer\n                    </button>\n                  </div>\n                  <div class=\"w-full p-t-25 text-center\">\n                    <div>\n                      <a routerLink=\"/authentication/signin\" class=\"txt1\">\n                        Se connecter?\n                      </a>\n                    </div>\n                  </div>\n                </form>\n  \n              </div>\n  \n            </div>\n          </div>\n        </div>\n      </div>\n  \n    </div>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { RestApiService } from 'src/app/core/service/api-services/rest-api.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n  public loading = false;\n  public errorMsg: any;\n\n  constructor(private restApi: RestApiService, private toastr: ToastrService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(_form: NgForm)\n  {\n    this.loading = true;\n    this.restApi.sendEmailToUser(_form.value.email).subscribe(\n      {\n        next: result =>{\n          if(!result)\n          {\n            this.errorMsg = \"Votre email est incorrecte !\";\n          }\n          else{\n            this.toastr.success(\"Veuillez vérifier votre email !\", null, {timeOut: 4000});\n           this.router.navigate([\"/authentication/signin\"]);\n          }\n          this.loading = false;\n        },\n        error: error =>{\n          console.log(error);\n          this.loading = false;\n        }\n      }\n    )\n  }\n\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link rel=\"stylesheet\"  href=\"signin.component.scss\">\n  <title>GesCab</title>\n</head>\n<body>\n  <div class=\"auth-container\">\n    <div class=\"row auth-main\">\n      <div class=\"col-sm-6 px-0 d-none d-sm-block\">\n        <div class=\"left-img\" style=\"background-image: url(assets/images/pages/Gb.png);\">\n        </div>\n      </div>\n      <div class=\"col-sm-6 auth-form-section\">\n        <div class=\"form-section\">\n          <div class=\"auth-wrapper\">\n            <div class=\"logo\">\n              <img  src=\"assets/images/ges_cab.png\" alt=\"\" width=\"250\" height=\"250\" >\n            </div>\n\n            <div class=\"card\">\n              <div class=\"card-body\">\n                <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n                  <div *ngIf=\"error\" class=\"alert alert-danger mt-3 mb-3\">{{error}}</div>\n                  <div class=\"row\">\n                    <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Nom d'utilisateur</mat-label>\n                        <input matInput formControlName=\"username\" minlength=\"3\" maxlength=\"20\">\n                        <mat-icon matSuffix>face</mat-icon>\n                        <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\n                          Champ obligatoire\n                        </mat-error>\n                      </mat-form-field>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Mot de passe</mat-label>\n                        <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\" minlength=\"6\" maxlength=\"20\">\n                        <a class=\"show-pwd-icon\" href=\"#\"  matSuffix (click)=\"hide = !hide\"\n                          [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                        </a>\n                        <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\n                          Mot de passe obligatoire\n                        </mat-error>\n                      </mat-form-field>\n                    </div>\n                  </div>\n                  <div class=\"mb-2 textRight\">\n                    <a routerLink=\"/authentication/reset-password\">Mot de passe oublié?</a>\n                  </div>\n                  <div class=\"container-auth-form-btn\">\n                    <div style=\"text-align:center\">\n                      <button mat-raised-button [class.auth-spinner]=\"loading\" [disabled]=\"loading\"\n                        class=\"auth-form-btn\" color=\"primary\" [disabled]=\"!authForm.valid \" type=\"submit\" >Connexion</button>\n                    </div>\n                    <div class=\"text-center mt-2 mb-1\">\n                      <span>OU</span>\n                    </div>\n                    <div style=\"text-align:center\" class=\"mt-1\">\n                      <button mat-raised-button class=\"auth-form-btn sign-up-button\" type=\"submit\" routerLink=\"/authentication/signup\">S'inscrire</button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"src/app/core/service/auth.service\";\nimport { Role } from \"src/app/core/models/role\";\nimport { UnsubscribeOnDestroyAdapter } from \"src/app/shared/UnsubscribeOnDestroyAdapter\";\n\n@Component({\n  selector: \"app-signin\",\n  templateUrl: \"./signin.component.html\",\n  styleUrls: [\"./signin.component.scss\"],\n})\nexport class SigninComponent\n  extends UnsubscribeOnDestroyAdapter\n  implements OnInit\n{\n  authForm: FormGroup;\n  submitted = false;\n  loading = false;\n  error = \"\";\n  hide = true;\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.authForm = this.formBuilder.group({\n      username: [\"\", Validators.required],\n      password: [\"\", Validators.required],\n    });\n  }\n\n  get f() {\n    return this.authForm.controls;\n  }\n\n  onSubmit()\n  {\n    this.loading = true;\n    if(this.authForm.invalid)\n    {\n      this.error = \"Nom d'utilisateur ou mot de passe non valide !\";\n      return;\n    }\n    else\n    {\n      this.authService.login(this.f.username.value, this.f.password.value).subscribe(\n        {\n          next: (token) => {\n            setTimeout(() => {\n              let userRole = localStorage.getItem(\"userRole\");\n              if(userRole === Role.SUPERADMIN || userRole === Role.ADMIN)\n              {\n                this.router.navigate([\"/admin/dashboard/main\"]);\n              }\n              else if(userRole === Role.MEDECIN)\n              {\n                this.router.navigate([\"/doctor/dashboard\"]);\n              }\n              else if(userRole === Role.PATIENT)\n              {\n                this.router.navigate([\"/patient/dashboard\"]);\n              }\n              else\n              {\n                this.router.navigate([\"/authentication/signin\"]);\n              }\n              \n              this.loading = false;\n            }, 1000);\n          },\n          error: () => {\n            this.error = \"Nom d'utilisateur ou mot de passe non valide !\";\n            this.loading = false;\n          }\n        }\n      );\n    }\n  }\n}\n","<div class=\"auth-container\">\n  <div class=\"row auth-main\">\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\" style=\"background-color: white;\">\n      <div class=\"logo\">\n        <img  src=\"assets/images/ges_cab.png\" alt=\"\" width=\"150\">\n      </div>\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/Gb.png);\">\n      </div>\n    </div>\n    <div class=\"col-sm-6 auth-form-section\" style=\"margin-bottom: -12%;\">\n      <div class=\"form-section\">\n        <div class=\"auth-wrapper\">\n          <h2 class=\"welcome-msg\"> S'inscrire </h2>\n          <p class=\"auth-signup-text text-muted\">Veuillez fournir vos informations restantes</p>\n          <form class=\"validate-form\" #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\">\n            <div *ngIf=\"error\" class=\"alert alert-danger mt-3 mb-3\">{{error}}</div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Email</mat-label>\n                  <input matInput type=\"email\" name=\"email\" ngModel [email]=\"true\" required>\n                  <mat-icon matSuffix>mail</mat-icon>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Veuillez entrer le bon E-mail\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width mb-3\">\n                  <mat-label>Profile</mat-label>\n                  <mat-select name=\"profile\" ngModel required #profile=\"ngModel\">\n                    <mat-option value=\"PATIENT\">\n                      PATIENT\n                    </mat-option>\n                    <mat-option value=\"MEDECIN\">\n                      MEDECIN\n                    </mat-option>\n                  </mat-select>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Champ obligatoire, choissez un Profile\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\" *ngIf=\"profile.value==='PATIENT'\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Profession</mat-label>\n                  <input matInput name=\"profession\" ngModel required>\n                  <mat-icon matSuffix>work</mat-icon>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Veuillez entrer votre profession\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\" *ngIf=\"profile.value==='MEDECIN'\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Rive</mat-label>\n                  <mat-select (ngModelChange)=\"onChangeRiveValue($event)\" name=\"rive\" ngModel required>\n                    <mat-option *ngFor=\"let item of allRive\" value=\"{{item.idRive}}\">\n                      {{item.nomRive}}\n                    </mat-option>\n                  </mat-select>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Veuillez entrez votre rive\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\" *ngIf=\"profile.value==='MEDECIN'\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Cabinet Médicale</mat-label>\n                  <mat-select (ngModelChange)=\"onChangeCabinetValue($event)\" name=\"cabinetMedicale\" ngModel required>\n                    <mat-option *ngFor=\"let item of allCabinetMedicales\" value=\"{{item.idCabinet}}\">\n                      {{item.nom}} | {{item.adresse}}\n                    </mat-option>\n                  </mat-select>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Veuillez selectionner un cabinet médicale\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\" *ngIf=\"profile.value==='MEDECIN'\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Spécialité</mat-label>\n                  <mat-select name=\"specialite\" ngModel required>\n                    <mat-option *ngFor=\"let item of allSpecialities\" value=\"{{item.idSpecialite}}\">\n                      {{item.nom}}\n                    </mat-option>\n                  </mat-select>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Veuillez entrer votre spécialité\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Mot de passe</mat-label>\n                  <input matInput name=\"password\" ngModel [type]=\"hide ? 'password' : 'text'\" minlength=\"6\" maxlength=\"20\" required>\n                  <mat-icon matSuffix (click)=\"hide = !hide\">\n                    {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Mot de passe obligatoire et au moins 6 caractères\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Confirmer le mot de passe</mat-label>\n                  <input matInput name=\"cpassword\" ngModel [type]=\"chide ? 'password' : 'text'\" minlength=\"6\" maxlength=\"20\" required>\n                  <mat-icon matSuffix (click)=\"chide = !chide\">\n                    {{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                  <mat-error *ngIf=\"!authForm.valid\">\n                    Mot de passe confirmer obligatoire et au moins 6 caractères\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"flex-sb-m w-full  p-b-20\">\n              <div>\n                <span>Vous avez déjà un compte? <a routerLink=\"/authentication/signin\">\n                    Se connecter\n                  </a></span>\n              </div>\n            </div>\n            <div class=\"container-auth-form-btn\">\n              <button mat-flat-button [class.auth-spinner]=\"loading\" [disabled]=\"loading\" color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid\" type=\"submit\">\n                S'inscrire\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RestApiService } from 'src/app/core/service/api-services/rest-api.service';\nimport { ToasServiceService } from 'src/app/core/service/toast-service/toas-service.service';\n\n@Component({\n  selector: 'app-next-signup',\n  templateUrl: './next-signup.component.html',\n  styleUrls: ['./next-signup.component.sass']\n})\nexport class NextSignupComponent implements OnInit {\n  hide = true;\n  chide = true;\n  error: any;\n  public userDataSendByRoute: any;\n  public userPostBody: any;\n  public allSpecialities: any;\n  public allCabinetMedicales: any;\n  public allRive: any;\n  public loading = false;\n\n  constructor(private activedRoute: ActivatedRoute, private restApi: RestApiService, private router: Router, private toastr: ToasServiceService) {\n    this.activedRoute.queryParams.subscribe(\n      data => {\n        this.userDataSendByRoute = data;\n      }\n    );\n\n    this.restApi.getAllRive().subscribe(\n      {\n        next: result =>{\n          this.allRive = result;\n        }\n      }\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n  onChangeRiveValue(idRive)\n  {\n    let postValue = {\"idRive\": idRive}\n    this.restApi.getCabinetByRive(postValue).subscribe(\n      {\n        next: result =>{\n          this.allCabinetMedicales = result;\n        }\n      }\n    );\n  }\n\n  onChangeCabinetValue(idCabinet)\n  {\n    let postValue = {\"idCabinet\": idCabinet}\n    this.restApi.getCabinetSpecialities(postValue).subscribe(\n      {\n        next: result =>{\n          this.allSpecialities = result;\n        }\n      }\n    );\n  }\n\n  onSubmit(authForm: NgForm)\n  {\n    this.loading = true;\n    this.restApi.getPersonEmail(authForm.value.email).subscribe(\n      {\n        next: result =>{\n          if(result)\n          {\n            this.loading = false;\n            this.error = \"Cet email existe déjà !\";\n            return;\n          }\n\n          if(authForm.value.password !== authForm.value.cpassword)\n          {\n            this.loading = false;\n            this.error = \"Votre mot de passe et le mot de passe confirmer doivent être identique !\";\n            return;\n          }\n          else\n          {\n            if(authForm.value.profile === \"MEDECIN\")\n            { \n              this.userPostBody = {\n                \"person_type\": \"MEDECIN\",\n                \"profile\": authForm.value.profile,\n                \"nom\": this.userDataSendByRoute.nom,\n                \"prenom\": this.userDataSendByRoute.prenom,\n                \"adresse\": this.userDataSendByRoute.adresse,\n                \"telephone\": this.userDataSendByRoute.telephone,\n                \"email\": authForm.value.email,\n                \"genre\": this.userDataSendByRoute.genre,\n                \"username\": this.userDataSendByRoute.username,\n                \"password\": authForm.value.password,\n                \"specialite\": {\n                  \"idSpecialite\": authForm.value.specialite\n                },\n                \"cabinetMedicale\": {\n                  \"idCabinet\": authForm.value.cabinetMedicale\n                },\n                \"imageProfile\": \"imageLinnnkkk\",\n                \"roles\": [\n                  {\"idRole\": 3}\n                ]\n              };\n              \n            }\n            else if(authForm.value.profile === \"PATIENT\")\n            {\n              this.userPostBody = {\n                \"person_type\": \"PATIENT\",\n                \"profile\": authForm.value.profile,\n                \"profession\": authForm.value.profession,\n                \"nom\": this.userDataSendByRoute.nom,\n                \"prenom\": this.userDataSendByRoute.prenom,\n                \"adresse\": this.userDataSendByRoute.adresse,\n                \"telephone\": this.userDataSendByRoute.telephone,\n                \"email\": authForm.value.email,\n                \"genre\": this.userDataSendByRoute.genre,\n                \"username\": this.userDataSendByRoute.username,\n                \"password\": authForm.value.password,\n                \"imageProfile\": \"imageLinnnkkk\",\n                \"roles\": [\n                  {\"idRole\": 4}\n                ]\n              };\n            }\n            else\n            {this.loading = false;\n              this.error = \"Profile inconnu !\";\n              return;\n            }\n            \n            this.restApi.addNewUser(this.userPostBody).subscribe(\n              {\n                next: result => {\n                  if(authForm.value.profile === \"MEDECIN\")\n                  {\n                    this.toastr.showSuccessMessage(\"Votre inscription a été prise en compte, veuillez attendre la confirmation par mail !\");\n                  }\n                  else{\n                    this.toastr.showSuccessMessage(\"Inscription éffectué avec succès !\");\n                  }\n                  \n                  this.loading = false;\n                  this.router.navigate(['/authentication/signin']);\n                },\n                error: error =>{\n                  this.loading = false;\n                  this.toastr.showErrorMessage(\"Problème d'inscription, réessayer plus tard !\");\n                }\n              }\n            );\n          }\n        }\n      }\n    );\n  }\n}\n","<div class=\"auth-container\">\n  <div class=\"row auth-main\">\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\" style=\"background-color: white;\">\n      <div class=\"logo\">\n        <img  src=\"assets/images/ges_cab.png\" alt=\"\" width=\"150\">\n      </div>\n      <div class=\"left-img img-fluid\" style=\"background-image: url(assets/images/pages/Gb.png);\"></div>\n    </div>\n    <div class=\"col-sm-6 auth-form-section\">\n      <div class=\"form-section\">\n        <div class=\"auth-wrapper\">\n          <h2 class=\"welcome-msg\"> S'inscrire </h2>\n          <p class=\"auth-signup-text text-muted\">Veuillez fournir vos informations</p>\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n            <div *ngIf=\"error\" class=\"alert alert-danger mt-3 mb-3\">{{error}}</div>\n            <div class=\"row\">\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Nom d'utilisateur</mat-label>\n                  <input matInput formControlName=\"username\" minlength=\"3\" maxlength=\"20\" required>\n                  <mat-icon matSuffix>face</mat-icon>\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\n                    Champ obligatoire, donnez un bon username\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Nom</mat-label>\n                  <input matInput formControlName=\"nom\" minlength=\"3\" maxlength=\"50\" required>\n                  <mat-icon matSuffix>face</mat-icon>\n                  <mat-error *ngIf=\"authForm.get('nom').hasError('required')\">\n                    Champ obligatoire, donnez un bon nom\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Prénom</mat-label>\n                  <input matInput formControlName=\"prenom\" minlength=\"3\" maxlength=\"50\" required>\n                  <mat-icon matSuffix>face</mat-icon>\n                  <mat-error *ngIf=\"authForm.get('prenom').hasError('required')\">\n                    Champ obligatoire, donnez un bon prenom\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Adresse</mat-label>\n                  <input matInput formControlName=\"adresse\" minlength=\"4\" maxlength=\"50\" required>\n                  <mat-icon matSuffix>book</mat-icon>\n                  <mat-error *ngIf=\"authForm.get('adresse').hasError('required')\">\n                    Champ obligatoire, donnez une bonne adresse\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width mb-3\">\n                  <mat-label>Genre</mat-label>\n                  <mat-select formControlName=\"genre\" required>\n                    <mat-option value=\"Homme\">\n                      Homme\n                    </mat-option>\n                    <mat-option value=\"Femme\">\n                      Femme\n                    </mat-option>\n                  </mat-select>\n                  <mat-error *ngIf=\"authForm.get('genre').hasError('required')\">\n                    Champ obligatoire, choissez un genre\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Téléphone</mat-label>\n                  <input matInput formControlName=\"telephone\" type=\"text\" required>\n                  <mat-icon matSuffix>phone</mat-icon>\n                  <mat-error *ngIf=\"authForm.get('telephone').hasError('required')\">\n                    Champ obligatoire, veuilez donner le bon numéro de téléphone\n                  </mat-error>\n                  <mat-error *ngIf=\"authForm.get('telephone').hasError('pattern')\">\n                    Veuillez entrer que des chiffres !\n                  </mat-error>\n                  <mat-error *ngIf=\"authForm.get('telephone').hasError('minlength')\">\n                    Votre numéro doit être au minimum de 8 chiffres !\n                  </mat-error>\n                  <mat-error *ngIf=\"authForm.get('telephone').hasError('maxlength')\">\n                    Votre numéro ne doit pas dépasser 13 chiffres !\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"flex-sb-m w-full mt-3 p-b-20\">\n              <div>\n                <span>Vous avez déjà un compte? <a routerLink=\"/authentication/signin\">\n                    Se connecter\n                  </a></span>\n              </div>\n            </div>\n            <div class=\"container-auth-form-btn\">\n              <button mat-flat-button [class.auth-spinner]=\"loading\" [disabled]=\"loading\" color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid\" type=\"submit\">\n                Suivant\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute, NavigationExtras } from \"@angular/router\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\n@Component({\n  selector: \"app-signup\",\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.scss\"],\n})\nexport class SignupComponent implements OnInit {\n  public error: any;\n  public authForm: FormGroup;\n  public returnUrl: string;\n  public hide = true;\n  public chide = true;\n  public loading = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private restApi: RestApiService\n  ) {}\n  ngOnInit() {\n    this.authForm = this.formBuilder.group({\n      username: [\"\", Validators.required],\n      nom: [\"\", Validators.required],\n      prenom: [\"\", Validators.required],\n      adresse: [\"\", Validators.required],\n      genre: [\"\", Validators.required],\n      telephone: [\"\", [Validators.required, Validators.minLength(8), Validators.maxLength(13), Validators.pattern(\"[0-9]*\")]]\n    });\n    \n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || \"/\";\n  }\n  get f() {\n    return this.authForm.controls;\n  }\n  onSubmit() {\n    // stop here if form is invalid\n    if (this.authForm.invalid) {\n      return;\n    }\n    else\n    {\n      this.loading = true;\n      this.restApi.getPersonUsername(this.f.username.value).subscribe(\n        {\n          next: result =>{\n            if(result)\n            {\n              this.loading = false;\n              this.error = \"Ce nom d'utilisateur existe déjà !\";\n              return;\n            }\n\n            this.restApi.getPersonTelephone(this.f.telephone.value).subscribe(\n              {\n                next: result =>{\n                  if(result)\n                  {\n                    this.loading = false;\n                    this.error = \"Ce numéro de téléphone existe déjà !\";\n                    return;\n                  }\n                  const navigationValue: NavigationExtras = {queryParams: {\n                    username: this.f.username.value,\n                    nom: this.f.nom.value,\n                    prenom: this.f.prenom.value,\n                    adresse: this.f.adresse.value,\n                    genre: this.f.genre.value,\n                    telephone: this.f.telephone.value,\n                  }}\n                  this.router.navigate(['/authentication/next-signup'], navigationValue);\n                  this.loading = false;\n                }\n              }\n            );\n          }\n        }\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToasServiceService {\n\n  constructor(private toastr: ToastrService) { }\n\n  showSuccessMessage(message: string){\n    this.toastr.success(message);\n  }\n\n  showErrorMessage(message: string){\n    this.toastr.error(message);\n  }\n\n  showWarningMessage(message: string){\n    this.toastr.warning(message);\n  }\n}\n"]}